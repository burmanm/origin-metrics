From 861dab3c8fda1734625a3b7c13816e2e73963bc4 Mon Sep 17 00:00:00 2001
From: Michael Burman <yak@iki.fi>
Date: Wed, 8 Nov 2017 15:02:25 +0200
Subject: [PATCH 2/2] Use new Openshift endpoint that fetches all the cached
 metrics

---
 metrics/sinks/hawkular/client.go                   | 47 +++----------
 metrics/sinks/hawkular/driver_test.go              | 81 +++++++++++++++++++++-
 .../hawkular/hawkular-client-go/metrics/client.go  | 37 ++++++++++
 3 files changed, 126 insertions(+), 39 deletions(-)

diff --git a/metrics/sinks/hawkular/client.go b/metrics/sinks/hawkular/client.go
index d2debab6..3f00c71a 100644
--- a/metrics/sinks/hawkular/client.go
+++ b/metrics/sinks/hawkular/client.go
@@ -30,51 +30,24 @@ import (
 
 // cacheDefinitions Fetches all known definitions from all tenants (all projects in Openshift)
 func (h *hawkularSink) cacheDefinitions() error {
-	tds, err := h.client.Tenants()
-	if err != nil {
-		return err
-	}
-
-	// TagsFiltering for definitions
-	tagsFilter := make(map[string]string, 1)
-	tagsFilter[descriptorTag] = "*"
-
-	m := make([]metrics.Modifier, len(h.modifiers), len(h.modifiers)+1)
-	copy(m, h.modifiers)
-	m = append(m, metrics.Filters(metrics.TagsFilter(tagsFilter)))
-
-	wG := &sync.WaitGroup{}
-
-	for _, td := range tds {
-		fetchModifiers := make([]metrics.Modifier, len(m), len(m)+1)
-		copy(fetchModifiers, m)
-		fetchModifiers = append(m, metrics.Tenant(td.ID))
-
-		wG.Add(1)
-		go func(m ...metrics.Modifier) {
-			err := h.updateDefinitions(fetchModifiers...)
-			if err != nil {
-				fmt.Println(err)
-			}
-			wG.Done()
-		}()
-
-		// Any missing fetches will be cached in the first datapoint store
+	if !h.disablePreCaching {
+		mds, err := h.client.AllDefinitions()
+		if err != nil {
+			return err
+		}
+		err = h.updateDefinitions(mds)
+		if err != nil {
+			return err
+		}
 	}
 
-	wG.Wait()
 	glog.V(4).Infof("PreCaching completed, cached %d definitions\n", len(h.reg))
 
 	return nil
 }
 
 // Fetches definitions from the server and checks that they're matching the descriptors
-func (h *hawkularSink) updateDefinitions(m ...metrics.Modifier) error {
-	mds, err := h.client.Definitions(m...)
-	if err != nil {
-		return err
-	}
-
+func (h *hawkularSink) updateDefinitions(mds []*metrics.MetricDefinition) error {
 	for _, p := range mds {
 		if model, f := h.models[p.Tags[descriptorTag]]; f && !h.recent(p, model) {
 			if err := h.client.UpdateTags(p.Type, p.ID, p.Tags, h.modifiers...); err != nil {
diff --git a/metrics/sinks/hawkular/driver_test.go b/metrics/sinks/hawkular/driver_test.go
index 1d67d1d0..918cd66a 100644
--- a/metrics/sinks/hawkular/driver_test.go
+++ b/metrics/sinks/hawkular/driver_test.go
@@ -21,6 +21,7 @@ import (
 	"net/http"
 	"net/http/httptest"
 	"net/url"
+	"strconv"
 	"strings"
 	"sync"
 	"testing"
@@ -313,7 +314,7 @@ func TestRegister(t *testing.T) {
 				w.WriteHeader(http.StatusNoContent)
 				return
 			}
-			if strings.Contains(r.RequestURI, "metrics?tags=descriptor_name%3A%2A") {
+			if strings.Contains(r.RequestURI, "metrics?tags=descriptor_name%3A%2A") || strings.Contains(r.RequestURI, "openshift") {
 				requests++
 				// typ := r.RequestURI[strings.Index(r.RequestURI, "type=")+5:]
 				// definitionsCalled[typ] = true
@@ -380,7 +381,7 @@ func TestRegister(t *testing.T) {
 	// assert.True(t, definitionsCalled["gauge"], "Gauge definitions were not fetched")
 	// assert.True(t, definitionsCalled["counter"], "Counter definitions were not fetched")
 	assert.True(t, updateTagsCalled, "Updating outdated tags was not called")
-	assert.Equal(t, 2, requests)
+	assert.Equal(t, 1, requests)
 
 	// Try without pre caching
 	// definitionsCalled = make(map[string]bool)
@@ -805,3 +806,79 @@ func TestBatchingTimeseries(t *testing.T) {
 		newIds[v] = true
 	}
 }
+
+func BenchmarkTagsUpdates(b *testing.B) {
+	http.DefaultTransport.(*http.Transport).MaxIdleConnsPerHost = 100
+	s := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
+		w.WriteHeader(http.StatusOK)
+	}))
+	defer s.Close()
+	hSink, err := integSink(s.URL + "?tenant=test-heapster&labelToTenant=projectId&batchSize=1000&concurrencyLimit=16")
+	// hSink, err := integSink("http://localhost:8080?tenant=test-heapster&labelToTenant=projectId&batchSize=1000&concurrencyLimit=16")
+	if err != nil {
+		b.FailNow()
+	}
+
+	smd := core.MetricDescriptor{
+		Name:      "test/metric/A",
+		Units:     core.UnitsBytes,
+		ValueType: core.ValueInt64,
+		Type:      core.MetricGauge,
+		Labels:    []core.LabelDescriptor{},
+	}
+
+	//register the metric definitions
+	hSink.Register([]core.MetricDescriptor{smd})
+	total := 10000
+
+	mset := make(map[string]*core.MetricSet)
+	for i := 0; i < total; i++ {
+		id := fmt.Sprintf("pod-%d", i)
+
+		l := make(map[string]string)
+		l["projectId"] = strconv.Itoa(i)
+		for i := 0; i < 32; i++ {
+			tagName := fmt.Sprintf("tag_name_%d", i)
+			tagValue := fmt.Sprintf("tag_value_%d", i)
+			l[tagName] = tagValue
+			l[core.LabelPodId.Key] = id
+		}
+
+		metrics := make(map[string]core.MetricValue)
+		metrics["test/metric/A"] = core.MetricValue{
+			ValueType:  core.ValueInt64,
+			MetricType: core.MetricCumulative,
+			IntValue:   123,
+		}
+
+		metricSet := core.MetricSet{
+			Labels:       l,
+			MetricValues: metrics,
+		}
+		mset[id] = &metricSet
+	}
+
+	data := core.DataBatch{
+		Timestamp:  time.Now(),
+		MetricSets: mset,
+		// MetricSets: map[string]*core.MetricSet{
+		//      "pod1": &metricSet,
+		// },
+	}
+
+	fmt.Printf("%d\n", len(data.MetricSets))
+
+	fmt.Printf("Generated data\n")
+	hSink.init()
+	hSink.Register([]core.MetricDescriptor{smd})
+	b.ResetTimer()
+	for j := 0; j < b.N; j++ {
+		for a := 0; a < 10; a++ {
+			data.Timestamp = time.Now()
+			hSink.ExportData(&data)
+			fmt.Printf("ExportData() returned, %d\n", b.N)
+		}
+	}
+
+	fmt.Printf("Amount of unique definitions: %d\n", len(hSink.reg))
+}
diff --git a/vendor/github.com/hawkular/hawkular-client-go/metrics/client.go b/vendor/github.com/hawkular/hawkular-client-go/metrics/client.go
index 89925ccd..6d09c6e1 100644
--- a/vendor/github.com/hawkular/hawkular-client-go/metrics/client.go
+++ b/vendor/github.com/hawkular/hawkular-client-go/metrics/client.go
@@ -315,6 +315,36 @@ func (c *Client) Create(md MetricDefinition, o ...Modifier) (bool, error) {
 	return true, nil
 }
 
+// AllDefinitions fetches all metric definitions (for every tenant) from the server. Requires admin/service rights
+func (c *Client) AllDefinitions(o ...Modifier) ([]*MetricDefinition, error) {
+	o = prepend(o, c.URL("GET", OpenshiftEndpoint()), AdminAuthentication(c.AdminToken))
+
+	r, err := c.Send(o...)
+	if err != nil {
+		return nil, err
+	}
+
+	defer r.Body.Close()
+
+	if r.StatusCode == http.StatusOK {
+		b, err := ioutil.ReadAll(r.Body)
+		if err != nil {
+			return nil, err
+		}
+		md := []*MetricDefinition{}
+		if b != nil && len(b) > 0 {
+			if err = json.Unmarshal(b, &md); err != nil {
+				return nil, err
+			}
+		}
+		return md, err
+	} else if r.StatusCode > 399 {
+		return nil, c.parseErrorResponse(r)
+	}
+
+	return nil, nil
+}
+
 // Definitions fetches metric definitions from the server
 func (c *Client) Definitions(o ...Modifier) ([]*MetricDefinition, error) {
 	o = prepend(o, c.URL("GET", TypeEndpoint(Generic)))
@@ -685,6 +715,13 @@ func (c *Client) createURL(e ...Endpoint) *url.URL {
 	return &mu
 }
 
+// OpenshiftEndpoint is a URL endpoint only available in the origin-metrics installation
+func OpenshiftEndpoint() Endpoint {
+	return func(u *url.URL) {
+		addToURL(u, "openshift")
+	}
+}
+
 // TenantEndpoint is a URL endpoint to fetch tenant related information
 func TenantEndpoint() Endpoint {
 	return func(u *url.URL) {
-- 
2.13.6

